// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: news.proto

#ifndef PROTOBUF_news_2eproto__INCLUDED
#define PROTOBUF_news_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_news_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFuckImpl();
void InitDefaultsFuck();
inline void InitDefaults() {
  InitDefaultsFuck();
}
}  // namespace protobuf_news_2eproto
namespace test {
class Fuck;
class FuckDefaultTypeInternal;
extern FuckDefaultTypeInternal _Fuck_default_instance_;
}  // namespace test
namespace test {

// ===================================================================

class Fuck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.Fuck) */ {
 public:
  Fuck();
  virtual ~Fuck();

  Fuck(const Fuck& from);

  inline Fuck& operator=(const Fuck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fuck(Fuck&& from) noexcept
    : Fuck() {
    *this = ::std::move(from);
  }

  inline Fuck& operator=(Fuck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fuck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fuck* internal_default_instance() {
    return reinterpret_cast<const Fuck*>(
               &_Fuck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Fuck* other);
  friend void swap(Fuck& a, Fuck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fuck* New() const PROTOBUF_FINAL { return New(NULL); }

  Fuck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Fuck& from);
  void MergeFrom(const Fuck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Fuck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_str = 2;
  bool has_m_str() const;
  void clear_m_str();
  static const int kMStrFieldNumber = 2;
  const ::std::string& m_str() const;
  void set_m_str(const ::std::string& value);
  #if LANG_CXX11
  void set_m_str(::std::string&& value);
  #endif
  void set_m_str(const char* value);
  void set_m_str(const char* value, size_t size);
  ::std::string* mutable_m_str();
  ::std::string* release_m_str();
  void set_allocated_m_str(::std::string* m_str);

  // required int32 mm = 1;
  bool has_mm() const;
  void clear_mm();
  static const int kMmFieldNumber = 1;
  ::google::protobuf::int32 mm() const;
  void set_mm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.Fuck)
 private:
  void set_has_mm();
  void clear_has_mm();
  void set_has_m_str();
  void clear_has_m_str();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr m_str_;
  ::google::protobuf::int32 mm_;
  friend struct ::protobuf_news_2eproto::TableStruct;
  friend void ::protobuf_news_2eproto::InitDefaultsFuckImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fuck

// required int32 mm = 1;
inline bool Fuck::has_mm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fuck::set_has_mm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fuck::clear_has_mm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fuck::clear_mm() {
  mm_ = 0;
  clear_has_mm();
}
inline ::google::protobuf::int32 Fuck::mm() const {
  // @@protoc_insertion_point(field_get:test.Fuck.mm)
  return mm_;
}
inline void Fuck::set_mm(::google::protobuf::int32 value) {
  set_has_mm();
  mm_ = value;
  // @@protoc_insertion_point(field_set:test.Fuck.mm)
}

// required string m_str = 2;
inline bool Fuck::has_m_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fuck::set_has_m_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fuck::clear_has_m_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fuck::clear_m_str() {
  m_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_str();
}
inline const ::std::string& Fuck::m_str() const {
  // @@protoc_insertion_point(field_get:test.Fuck.m_str)
  return m_str_.GetNoArena();
}
inline void Fuck::set_m_str(const ::std::string& value) {
  set_has_m_str();
  m_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.Fuck.m_str)
}
#if LANG_CXX11
inline void Fuck::set_m_str(::std::string&& value) {
  set_has_m_str();
  m_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.Fuck.m_str)
}
#endif
inline void Fuck::set_m_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_m_str();
  m_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.Fuck.m_str)
}
inline void Fuck::set_m_str(const char* value, size_t size) {
  set_has_m_str();
  m_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.Fuck.m_str)
}
inline ::std::string* Fuck::mutable_m_str() {
  set_has_m_str();
  // @@protoc_insertion_point(field_mutable:test.Fuck.m_str)
  return m_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fuck::release_m_str() {
  // @@protoc_insertion_point(field_release:test.Fuck.m_str)
  clear_has_m_str();
  return m_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fuck::set_allocated_m_str(::std::string* m_str) {
  if (m_str != NULL) {
    set_has_m_str();
  } else {
    clear_has_m_str();
  }
  m_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_str);
  // @@protoc_insertion_point(field_set_allocated:test.Fuck.m_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_news_2eproto__INCLUDED
